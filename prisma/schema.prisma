generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model tahunAjaran {
  id              Int               @id @unique @default(sequence())
  tahun           String
  semester        String
  kelas           kelas[]
  lulusMK         lulusMK[]
  lulusCPMK       lulusCPMK[]
  lulusMK_CPMK    lulusMK_CPMK[]
  lulusKelas_CPMK lulusKelas_CPMK[]
  performaCPL     performaCPL[]

  @@unique([tahun, semester])
}

model prodi {
  kode      String             @id @unique
  nama      String
  tendik    account[]          @relation(name: "prodi-tendik")
  kaprodi   account?           @relation(name: "prodi-kaprodi", fields: [kaprodiId], references: [id])
  kaprodiId Int?               @unique
  PL        PL[]
  CPL       CPL[]
  BK        BK[]
  MK        MK[]
  CPMK      CPMK[]
  mahasiswa mahasiswa[]
  PCPMK     penilaianCPMK[]
  nilai     inputNilai[]
  KK        kelompokKeahlian[]
}

model kelompokKeahlian {
  id      Int      @id @unique @default(sequence())
  nama    String
  ketua   account? @relation(name: "KK-ketua", fields: [ketuaId], references: [id])
  ketuaId Int?     @unique
  prodi   prodi    @relation(fields: [prodiId], references: [kode], onDelete: Cascade)
  prodiId String
  MK      MK[]
}

model account {
  id         Int               @id @unique @default(sequence())
  nama       String
  email      String            @unique
  role       String
  password   String
  kelas      kelas[]           @relation("kelas_dosen")
  prodi      prodi             @relation(name: "prodi-tendik", fields: [prodiId], references: [kode], onDelete: Cascade)
  prodiId    String
  ketuaProdi prodi?            @relation(name: "prodi-kaprodi")
  KK         kelompokKeahlian? @relation(name: "KK-ketua")
  rps        rps[]
}

model PL {
  id        Int     @id @unique @default(sequence())
  kode      String
  deskripsi String
  CPL       CPL[]   @relation("cpl_pl")
  prodi     prodi?  @relation(fields: [prodiId], references: [kode], onDelete: Cascade)
  prodiId   String?

  @@unique([kode, prodiId])
}

model CPL {
  id               Int             @id @unique @default(sequence())
  kode             String
  deskripsi        String
  keterangan       String
  deskripsiInggris String
  BK               BK[]            @relation("cpl_bk")
  PL               PL[]            @relation("cpl_pl")
  CPMK             CPMK[]
  penilaianCPMK    penilaianCPMK[]
  prodi            prodi           @relation(fields: [prodiId], references: [kode], onDelete: Cascade)
  prodiId          String
  performaCPL      performaCPL[]

  @@unique([kode, prodiId])
}

model performaCPL {
  id            Int         @id @unique @default(sequence())
  performa      Float
  CPL           CPL         @relation(fields: [CPLId], references: [id], onDelete: Cascade)
  CPLId         Int
  tahunAjaran   tahunAjaran @relation(fields: [tahunAjaranId], references: [id], onDelete: Cascade)
  tahunAjaranId Int

  @@unique([CPLId, tahunAjaranId])
}

model BK {
  id        Int    @id @unique @default(sequence())
  kode      String
  deskripsi String
  min       Int
  max       Int
  CPL       CPL[]  @relation("cpl_bk")
  MK        MK[]   @relation("bk_mk")
  prodi     prodi  @relation(fields: [prodiId], references: [kode], onDelete: Cascade)
  prodiId   String

  @@unique([kode, prodiId])
}

model MK {
  kode                String                @id @unique
  deskripsi           String
  deskripsiInggris    String
  sks                 String
  semester            String
  batasLulusMahasiswa Float
  batasLulusMK        Float
  lulusMK             lulusMK[]
  lulusMK_CPMK        lulusMK_CPMK[]
  kelas               kelas[]
  BK                  BK[]                  @relation("bk_mk")
  CPMK                CPMK[]                @relation("cpmk_mk")
  penilaianCPMK       penilaianCPMK[]
  KK                  kelompokKeahlian      @relation(fields: [KKId], references: [id])
  KKId                Int
  prodi               prodi                 @relation(fields: [prodiId], references: [kode], onDelete: Cascade)
  prodiId             String
  rencanaPembelajaran rencanaPembelajaran[]
  rps                 rps?                  @relation(name: "mk-rps")

  // self relation
  prerequisitesMK   MK[] @relation("Prerequisites")
  isPrerequisiteFor MK[] @relation("Prerequisites")
}

model rps {
  id               Int     @id @unique @default(sequence())
  MK               MK      @relation(name: "mk-rps", fields: [MKId], references: [kode], onDelete: Cascade)
  MKId             String  @unique
  pengembang       account? @relation(fields: [pengembangId], references: [id], onDelete: Cascade)
  pengembangId     Int?
  deskripsi        String
  pustakaUtama     String
  pustakaPendukung String
  software         String
  hardware         String
  revisi           String
}

model lulusMK_CPMK {
  id            Int         @id @unique @default(sequence())
  MK            MK          @relation(fields: [MKId], references: [kode], onDelete: Cascade)
  MKId          String
  tahunAjaran   tahunAjaran @relation(fields: [tahunAjaranId], references: [id], onDelete: Cascade)
  tahunAjaranId Int
  CPMK          CPMK        @relation(fields: [CPMKId], references: [id], onDelete: Cascade)
  CPMKId        Int
  jumlahLulus   Float

  @@unique([MKId, CPMKId, tahunAjaranId])
}

model lulusMK {
  id              Int         @id @unique @default(sequence())
  MK              MK          @relation(fields: [MKId], references: [kode], onDelete: Cascade)
  MKId            String
  tahunAjaran     tahunAjaran @relation(fields: [tahunAjaranId], references: [id], onDelete: Cascade)
  tahunAjaranId   Int
  jumlahLulus     Int
  persentaseLulus Float

  @@unique([MKId, tahunAjaranId])
}

model rencanaPembelajaran {
  id     Int    @id @unique @default(sequence())
  minggu Int
  materi String
  metode String
  MK     MK     @relation(fields: [MKId], references: [kode], onDelete: Cascade)
  MKId   String
}

model kelas {
  id             Int               @id @unique @default(sequence())
  nama           String
  MK             MK                @relation(fields: [MKId], references: [kode], onDelete: Cascade)
  MKId           String
  tahunAjaran    tahunAjaran       @relation(fields: [tahunAjaranId], references: [id], onDelete: Cascade)
  tahunAjaranId  Int
  mahasiswa      mahasiswa[]       @relation("kelas_mahasiswa")
  nilaiMahasiswa inputNilai[]
  dosen          account[]         @relation("kelas_dosen")
  jumlahLulus    Int
  mahasiswaLulus Json?
  dataCPMK       Json?
  lulusCPMK      lulusKelas_CPMK[]

  @@unique([nama, MKId, tahunAjaranId])
}

model lulusKelas_CPMK {
  id            Int         @id @unique @default(sequence())
  kelas         kelas       @relation(fields: [kelasId], references: [id], onDelete: Cascade)
  kelasId       Int
  CPMK          CPMK        @relation(fields: [CPMKId], references: [id], onDelete: Cascade)
  CPMKId        Int
  tahunAjaran   tahunAjaran @relation(fields: [tahunAjaranId], references: [id], onDelete: Cascade)
  tahunAjaranId Int
  jumlahLulus   Float

  @@unique([kelasId, CPMKId, tahunAjaranId])
}

model CPMK {
  id             Int               @id @unique @default(sequence())
  kode           String
  deskripsi      String
  CPL            CPL               @relation(fields: [CPLKode], references: [id], onDelete: Cascade)
  CPLKode        Int
  MK             MK[]              @relation("cpmk_mk")
  penilaianCPMK  penilaianCPMK[]
  prodi          prodi             @relation(fields: [prodiId], references: [kode], onDelete: Cascade)
  prodiId        String
  lulusKelasCPMK lulusKelas_CPMK[]
  lulusCPMK      lulusCPMK[]
  lulusMK_CPMK   lulusMK_CPMK[]

  @@unique([kode, prodiId])
}

model lulusCPMK {
  id            Int         @id @unique @default(sequence())
  CPMK          CPMK        @relation(fields: [CPMKId], references: [id], onDelete: Cascade)
  CPMKId        Int
  tahunAjaran   tahunAjaran @relation(fields: [tahunAjaranId], references: [id], onDelete: Cascade)
  tahunAjaranId Int
  jumlahLulus   Float

  @@unique([CPMKId, tahunAjaranId])
}

model penilaianCPMK {
  id              Int          @id @unique @default(sequence())
  kode            String
  CPL             CPL          @relation(fields: [CPLkode], references: [id], onDelete: Cascade)
  CPLkode         Int
  MK              MK           @relation(fields: [MKkode], references: [kode], onDelete: Cascade)
  MKkode          String
  CPMK            CPMK         @relation(fields: [CPMKkode], references: [id], onDelete: Cascade)
  CPMKkode        Int
  tahapPenilaian  String
  teknikPenilaian String
  instrumen       String
  batasNilai      Float
  kriteria        Json
  inputNilai      inputNilai[]
  prodi           prodi        @relation(fields: [prodiId], references: [kode], onDelete: Cascade)
  prodiId         String

  @@unique([kode, prodiId])
}

model mahasiswa {
  nim        String       @id @unique
  nama       String
  kelas      kelas[]      @relation("kelas_mahasiswa")
  inputNilai inputNilai[]
  prodi      prodi        @relation(fields: [prodiId], references: [kode], onDelete: Cascade)
  prodiId    String
}

model inputNilai {
  id              Int           @unique @default(sequence())
  penilaianCPMK   penilaianCPMK @relation(fields: [penilaianCPMKId], references: [id], onDelete: Cascade)
  penilaianCPMKId Int
  mahasiswa       mahasiswa     @relation(fields: [mahasiswaNim], references: [nim], onDelete: Cascade)
  mahasiswaNim    String
  kelas           kelas         @relation(fields: [kelasId], references: [id], onDelete: Cascade)
  kelasId         Int
  nilai           Float[]
  prodi           prodi         @relation(fields: [prodiId], references: [kode], onDelete: Cascade)
  prodiId         String
}
